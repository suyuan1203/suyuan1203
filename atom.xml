<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Su Yuan</title>
  
  
  <link href="https://blog.suyuan.me/atom.xml" rel="self"/>
  
  <link href="https://blog.suyuan.me/"/>
  <updated>2023-08-16T23:41:31.489Z</updated>
  <id>https://blog.suyuan.me/</id>
  
  <author>
    <name>Su Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览记录2023-08-17</title>
    <link href="https://blog.suyuan.me/2023/08/17/%E6%B5%8F%E8%A7%88%E8%AE%B0%E5%BD%952023-08-17/"/>
    <id>https://blog.suyuan.me/2023/08/17/%E6%B5%8F%E8%A7%88%E8%AE%B0%E5%BD%952023-08-17/</id>
    <published>2023-08-17T07:37:54.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/a16z-infra/ai-town">https://github.com/a16z-infra/ai-town</a> AI虚拟小镇<br><a href="https://www.liblibai.com/">https://www.liblibai.com/</a> 在线stable diffusion<br><a href="https://github.com/shinework/photoshot">https://github.com/shinework/photoshot</a> 开源妙鸭相机<br><a href="https://htmx.org/docs/">https://htmx.org/docs/</a> 一个扩展现有html功能的js库</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/a16z-infra/ai-town&quot;&gt;https://github.com/a16z-infra/ai-town&lt;/a&gt; AI虚拟小镇&lt;br&gt;&lt;a href=&quot;https://www.liblibai.com/&quot;&gt;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浏览记录-2023-08-15</title>
    <link href="https://blog.suyuan.me/2023/08/15/%E6%B5%8F%E8%A7%88%E8%AE%B0%E5%BD%95-2023-08-15/"/>
    <id>https://blog.suyuan.me/2023/08/15/%E6%B5%8F%E8%A7%88%E8%AE%B0%E5%BD%95-2023-08-15/</id>
    <published>2023-08-15T07:23:57.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://agi-sphere.com/llama-guide/">https://agi-sphere.com/llama-guide/</a> llama介绍<br><a href="https://docusaurus.io/">https://docusaurus.io/</a> 基于react的静态站生成<br><a href="https://www.carbonads.net/">https://www.carbonads.net/</a>  技术领域广告联盟<br><a href="https://unsplash.com/">https://unsplash.com/</a> 免费图片<br><a href="https://github.com/lllyasviel/Fooocus">https://github.com/lllyasviel/Fooocus</a> stable diffusion包装<br><a href="https://github.com/codecrafters-io/build-your-own-x">https://github.com/codecrafters-io/build-your-own-x</a> 造轮子集合<br><a href="https://github.com/easychen/book-by-ai">https://github.com/easychen/book-by-ai</a> chatgpt生成电子书</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://agi-sphere.com/llama-guide/&quot;&gt;https://agi-sphere.com/llama-guide/&lt;/a&gt; llama介绍&lt;br&gt;&lt;a href=&quot;https://docusaurus.io/&quot;&gt;https:/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浏览记录2023-08-12</title>
    <link href="https://blog.suyuan.me/2023/08/12/%E6%B5%8F%E8%A7%88%E8%AE%B0%E5%BD%952023-08-12/"/>
    <id>https://blog.suyuan.me/2023/08/12/%E6%B5%8F%E8%A7%88%E8%AE%B0%E5%BD%952023-08-12/</id>
    <published>2023-08-12T09:09:32.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>浏览记录2023-08-12</p><p><a href="https://github.com/songquanpeng/one-api">https://github.com/songquanpeng/one-api</a> 按照openapi格式访问其他大模型<br><a href="https://github.com/labring/FastGPT">https://github.com/labring/FastGPT</a> 基于 LLM 大语言模型的知识库问答系统<br><a href="https://github.com/labring/laf">https://github.com/labring/laf</a> 自部署的云函数，云数据库，云IDE<br><a href="https://github.com/labring/sealos">https://github.com/labring/sealos</a> 支持自部署，基于kubernetes，简化部署应用流程<br><a href="https://speed.cloudflare.com/">https://speed.cloudflare.com/</a> cloudflare测速工具<br><a href="https://github.com/ReadSomething/ReadSomething">https://github.com/ReadSomething/ReadSomething</a> Chrome 插件，可以将网页转成阅读模式<br><a href="https://www.plasmo.com/">https://www.plasmo.com/</a> 浏览器插件打包工具</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;浏览记录2023-08-12&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/songquanpeng/one-api&quot;&gt;https://github.com/songquanpeng/one-api&lt;/a&gt; 按照openapi格式访问其他大模型&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>绕过new bing限制</title>
    <link href="https://blog.suyuan.me/2023/04/29/%E7%BB%95%E8%BF%87new-bing%E9%99%90%E5%88%B6/"/>
    <id>https://blog.suyuan.me/2023/04/29/%E7%BB%95%E8%BF%87new-bing%E9%99%90%E5%88%B6/</id>
    <published>2023-04-29T12:42:31.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>下载Edge</p><p>安装header editor插件</p><p>创建规则</p><ul><li>Rule type: Modify Request Header</li><li>Match type: Regular Expression</li><li>Match Rules: ^http(s?)://<a href="http://www.bing.com/(.*)">www.bing.com/(.*)</a></li><li>Header Name: x-forwarded-for</li><li>Header Value: 1.1.1.1</li></ul><p>感谢<a href="https://twitter.com/starzqeth">@starzqeth</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下载Edge&lt;/p&gt;
&lt;p&gt;安装header editor插件&lt;/p&gt;
&lt;p&gt;创建规则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rule type: Modify Request Header&lt;/li&gt;
&lt;li&gt;Match type: Regular Expression&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux namespace</title>
    <link href="https://blog.suyuan.me/2023/03/09/linux-namespace/"/>
    <id>https://blog.suyuan.me/2023/03/09/linux-namespace/</id>
    <published>2023-03-09T23:17:58.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>What is linux namespaces?</p><p>Linux namespaces is a feature which let processes under certain namespace can only view or manage the resources belonging to the namespace. Those resources include process tree, network interface, mount points, etc.</p><p>Linux namespaces list:</p><ul><li>Cgroup</li><li>IPC</li><li>Network</li><li>Mount</li><li>PID</li><li>Time</li><li>User</li><li>UTS</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;What is linux namespaces?&lt;/p&gt;
&lt;p&gt;Linux namespaces is a feature which let processes under certain namespace can only view or manage the re</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Node.js mysqljs/mysql package</title>
    <link href="https://blog.suyuan.me/2019/06/20/Node-js-mysqljs-mysql-package/"/>
    <id>https://blog.suyuan.me/2019/06/20/Node-js-mysqljs-mysql-package/</id>
    <published>2019-06-20T15:19:48.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/mysqljs/mysql%E6%98%AF%E4%B8%80%E4%B8%AA%E7%94%A8Node.js%E5%86%99%E7%9A%84mysql%E9%A9%B1%E5%8A%A8%EF%BC%8C%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%EF%BC%8C%E6%98%8E%E7%99%BD%E3%80%82">https://github.com/mysqljs/mysql是一个用Node.js写的mysql驱动，代码简洁，明白。</a></p><p>一个mysql驱动要完成的功能是，建立到mysql服务器的tcp连接，然后按照mysql的protocol把数据发送给服务器，服务器收到数据以后，解析出要执行的命令和sql，执行sql，把结果按照protocol写回到客户端。</p><p>mysqljs/mysql的对象主要有</p><ul><li>Connection 管理到服务器的连接</li><li>Protocol 处理发送到服务器的数据和服务器返回的数据</li><li>Sequence/Query 代表一个query</li><li>ComQueryPacket和其他Packet  代表一个发送给服务器的消息</li><li>PacketWriter 把Packet转换为buffer交给Protocol</li><li>Parser 解析Protocol从服务器获得的buffer</li></ul><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p>建立连接的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var mysql = require(&#x27;mysql&#x27;);</span><br><span class="line">var connection = mysql.createConnection(&#123;&#125;);</span><br><span class="line">connection.connect();</span><br></pre></td></tr></table></figure><p>lib/Connection.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Connection(options) &#123;</span><br><span class="line">    Events.EventEmitter.call(this); // Connection是一个EventEmmiter</span><br><span class="line">    this._socket = options.socket;</span><br><span class="line">    this._protocol = new Protocol(&#123;config: this.config, connection: this&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Connection对象的_socket是一个到mysql的tcp链接，代码在<br>lib/Connection.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Connection.prototype.connect = function connect(options, callback) &#123;</span><br><span class="line">    this._socket = (this.config.socketPath)</span><br><span class="line">      ? Net.createConnection(this.config.socketPath)</span><br><span class="line">      : Net.createConnection(this.config.port, this.config.host);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的this._protocol是一个Protocol对象，Protocol对象是一个stream</p><p>lib/protocol/Protocol.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Util.inherits(Protocol, Stream);</span><br><span class="line">function Protocol(options) &#123;</span><br><span class="line">    Stream.call(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行query"><a href="#执行query" class="headerlink" title="执行query"></a>执行query</h2><p>connection.query(‘select * from users’)实际创建了一个query，然后调用Protocol._enqueue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Connection.prototype.query = function query(sql, values, cb) &#123;</span><br><span class="line">    var query = Connection.createQuery(sql, values, cb);</span><br><span class="line">    return this._protocol._enqueue(query);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Connection.createQuery返回了一个Query对象，Query对象继承自Sequence对象<br>lib/protocol/sequences/Query.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Util.inherits(Query, Sequence);</span><br><span class="line">function Query(options, callback) &#123;</span><br><span class="line">    Sequence.call(this, options, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sequence是一个EventEmmiter<br>lib/protocol/sequences/Sequence.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Util.inherits(Sequence, EventEmitter);</span><br><span class="line">function Sequence(options, callback) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Connection.createQuery创建的query被添加到Protocol对象的一个内部queue中，然后调用query.start</p><p>lib/protocol/Protocol.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Protocol.prototype._enqueue = function(sequence) &#123;</span><br><span class="line">    if (this._queue.length === 1) &#123;</span><br><span class="line">        this._parser.resetPacketNumber();</span><br><span class="line">        this._startSequence(sequence);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Protocol有一个enqueue事件，在有新的query被enqueue时会触发</p><p>lib/protocol/Protocol.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Protocol.prototype._enqueue = function(sequence) &#123;</span><br><span class="line">    this.emit(&#x27;enqueue&#x27;, sequence);</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>在建立的连接的时候，Connection对象会给这个事件添加监听函数</p><p>lib/Connection.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Connection.prototype.connect = function connect(options, callback) &#123;</span><br><span class="line">    this._protocol.on(&#x27;enqueue&#x27;, this._handleProtocolEnqueue.bind(this));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this._handleProtocolEnqueue函数仅仅是把这个事件在Connection对象上再emit一次，这样就能允许Connection对象的调用者监听Connection的enqueue事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Connection.prototype._handleProtocolEnqueue = function _handleProtocolEnqueue(sequence) &#123;</span><br><span class="line">  this.emit(&#x27;enqueue&#x27;, sequence);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在Protocol._enqueue方法中，监听了Query对象(Sequence对象)的很多事件</p><p>lib/protocol/Protocol.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Protocol.prototype._enqueue = function(sequence) &#123;</span><br><span class="line">    sequence</span><br><span class="line">    .on(&#x27;error&#x27;, function(err) &#123;</span><br><span class="line">      self._delegateError(err, sequence);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(&#x27;packet&#x27;, function(packet) &#123;</span><br><span class="line">      sequence._timer.active();</span><br><span class="line">      self._emitPacket(packet);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(&#x27;timeout&#x27;, function() &#123;</span><br><span class="line">      var err = new Error(sequence.constructor.name + &#x27; inactivity timeout&#x27;);</span><br><span class="line"></span><br><span class="line">      err.code    = &#x27;PROTOCOL_SEQUENCE_TIMEOUT&#x27;;</span><br><span class="line">      err.fatal   = true;</span><br><span class="line">      err.timeout = sequence._timeout;</span><br><span class="line"></span><br><span class="line">      self._delegateError(err, sequence);</span><br><span class="line">    &#125;);</span><br><span class="line">    sequence.on(&#x27;end&#x27;, function () &#123;</span><br><span class="line">      self._dequeue(sequence);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Protocol在_enqueue方法中调用了Protocol.prototype._startSequence，Protocol.prototype._startSequence的定义</p><p>lib/protocol/Protocol.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Protocol.prototype._startSequence = function(sequence) &#123;</span><br><span class="line">  if (sequence._timeout &gt; 0 &amp;&amp; isFinite(sequence._timeout)) &#123;</span><br><span class="line">    sequence._timer.start(sequence._timeout);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (sequence.constructor === Sequences.ChangeUser) &#123;</span><br><span class="line">    sequence.start(this._handshakeInitializationPacket);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    sequence.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Sequeuce.start一般由子类实现，所以可以看Query.start</p><h2 id="query按照protocol转换为buffer"><a href="#query按照protocol转换为buffer" class="headerlink" title="query按照protocol转换为buffer"></a>query按照protocol转换为buffer</h2><p>lib/protocol/sequences/Query.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Query.prototype.start = function() &#123;</span><br><span class="line">  this.emit(&#x27;packet&#x27;, new Packets.ComQueryPacket(this.sql));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个方法创建了一个ComQueryPacket，然后通过packet事件通知其他组件。Query是一个EventEmitter，所以可以通过事件和Query对象通信。</p><p>lib/protocol/packets/ComQueryPacket.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = ComQueryPacket;</span><br><span class="line">function ComQueryPacket(sql) &#123;</span><br><span class="line">  this.command = 0x03;</span><br><span class="line">  this.sql     = sql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ComQueryPacket.prototype.write = function(writer) &#123;</span><br><span class="line">  writer.writeUnsignedNumber(1, this.command);</span><br><span class="line">  writer.writeString(this.sql);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ComQueryPacket.prototype.parse = function(parser) &#123;</span><br><span class="line">  this.command = parser.parseUnsignedNumber(1);</span><br><span class="line">  this.sql     = parser.parsePacketTerminatedString();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ComQueryPacket类仅仅有两个成员，command和sql</p><p>根据mysql文档</p><blockquote><p>A COM_QUERY is used to send the server a text-based query that is executed immediately.</p></blockquote><p>Query.prototype.start方法emit的packet事件，会触发在Protocol.prototype._enqueue中设置的handler</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Protocol.prototype._enqueue = function(sequence) &#123;</span><br><span class="line">    sequence</span><br><span class="line">    .on(&#x27;error&#x27;, function(err) &#123;</span><br><span class="line">      self._delegateError(err, sequence);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(&#x27;packet&#x27;, function(packet) &#123;</span><br><span class="line">      sequence._timer.active();</span><br><span class="line">      self._emitPacket(packet);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(&#x27;timeout&#x27;, function() &#123;</span><br><span class="line">      var err = new Error(sequence.constructor.name + &#x27; inactivity timeout&#x27;);</span><br><span class="line"></span><br><span class="line">      err.code    = &#x27;PROTOCOL_SEQUENCE_TIMEOUT&#x27;;</span><br><span class="line">      err.fatal   = true;</span><br><span class="line">      err.timeout = sequence._timeout;</span><br><span class="line"></span><br><span class="line">      self._delegateError(err, sequence);</span><br><span class="line">    &#125;);</span><br><span class="line">    sequence.on(&#x27;end&#x27;, function () &#123;</span><br><span class="line">      self._dequeue(sequence);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到这里handler调用了self._emitPacket(packet);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Protocol.prototype._emitPacket = function(packet) &#123;</span><br><span class="line">  var packetWriter = new PacketWriter();</span><br><span class="line">  packet.write(packetWriter);</span><br><span class="line">  this.emit(&#x27;data&#x27;, packetWriter.toBuffer(this._parser));</span><br><span class="line"></span><br><span class="line">  if (this._config.debug) &#123;</span><br><span class="line">    this._debugPacket(false, packet);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>_emitPacket调用了packet.write</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ComQueryPacket.prototype.write = function(writer) &#123;</span><br><span class="line">  writer.writeUnsignedNumber(1, this.command);</span><br><span class="line">  writer.writeString(this.sql);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>packet.write调用了PacketWriter的writeUnsignedNumber和writeString方法</p><p>PacketWriter定义<br>lib/protocol/PacketWriter.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = PacketWriter;</span><br><span class="line">function PacketWriter() &#123;</span><br><span class="line">  this._buffer = null;</span><br><span class="line">  this._offset = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>writeUnsignedNumber方法把一个number写到内部的一个buffer，this._buffer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PacketWriter.prototype.writeUnsignedNumber = function(bytes, value) &#123;</span><br><span class="line">  this._allocate(bytes);</span><br><span class="line"></span><br><span class="line">  for (var i = 0; i &lt; bytes; i++) &#123;</span><br><span class="line">    this._buffer[this._offset++] = (value &gt;&gt; (i * 8)) &amp; 0xff;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>writeString方法把一个string写到this._buffer</p><p>接下来Protocol emit了data事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.emit(&#x27;data&#x27;, packetWriter.toBuffer(this._parser));</span><br></pre></td></tr></table></figure><p>这里调用了packetWriter.toBuffer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PacketWriter.prototype.toBuffer = function toBuffer(parser) &#123;</span><br><span class="line">  if (!this._buffer) &#123;</span><br><span class="line">    this._buffer = Buffer.alloc(0);</span><br><span class="line">    this._offset = 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var buffer  = this._buffer;</span><br><span class="line">  var length  = this._offset;</span><br><span class="line">  var packets = Math.floor(length / MAX_PACKET_LENGTH) + 1;</span><br><span class="line"></span><br><span class="line">  this._buffer = Buffer.allocUnsafe(length + packets * 4);</span><br><span class="line">  this._offset = 0;</span><br><span class="line"></span><br><span class="line">  for (var packet = 0; packet &lt; packets; packet++) &#123;</span><br><span class="line">    var isLast = (packet + 1 === packets);</span><br><span class="line">    var packetLength = (isLast)</span><br><span class="line">      ? length % MAX_PACKET_LENGTH</span><br><span class="line">      : MAX_PACKET_LENGTH;</span><br><span class="line"></span><br><span class="line">    var packetNumber = parser.incrementPacketNumber();</span><br><span class="line"></span><br><span class="line">    this.writeUnsignedNumber(3, packetLength);</span><br><span class="line">    this.writeUnsignedNumber(1, packetNumber);</span><br><span class="line"></span><br><span class="line">    var start = packet * MAX_PACKET_LENGTH;</span><br><span class="line">    var end   = start + packetLength;</span><br><span class="line"></span><br><span class="line">    this.writeBuffer(buffer.slice(start, end));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return this._buffer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个方法调整this._buffer的内容，具体步骤是，如果this._buffer的长度超过了MAX_PACKET_LENGTH，那么把this._buffer分成几个packet，每个packet的最大长度是MAX_PACKET_LENGTH。同时在每个packet前添加4个字节的内容，前三个字节代表packet的长度，第四个字节代表packet的序号。然后返回调整后的this._buffer</p><p>Protocol emit的data事件会触发在Connection中设置的handler</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this._protocol.on(&#x27;data&#x27;, function(data) &#123;</span><br><span class="line">  connection._socket.write(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里把packet写到connection._socket中，服务器就会收到packet。</p><p>当mysql服务器收到客户端的数据的时候，先读取4个字节，获得packet的长度和序号，然后读取第一个packet，接下来又读取4个字节，获得下一个packet的长度和序号，依次类推，最终读取完客户端发送的数据。</p><p>MAX_PACKET_LENGTH的定义是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var MAX_PACKET_LENGTH            = Math.pow(2, 24) - 1; // 大概16M</span><br></pre></td></tr></table></figure><p>明显一般的packet都不会超过16M，所以服务器收到的大部分packet都类似于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">三个字节长度 - 1个字节序号 - packet内容</span><br></pre></td></tr></table></figure><p>服务器根据长度读取到packet的内容，然后从内容中解析出，要执行的command的类型，比如0x03，和对应的sql。</p><h2 id="服务器返回数据"><a href="#服务器返回数据" class="headerlink" title="服务器返回数据"></a>服务器返回数据</h2><p>服务器返回数据的时候，会往Connection._socket中写数据，因此会触发Connection的data事件</p><p>在Connection的connect方法中，设置了Connection.socket的data事件的handler</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this._socket.on(&#x27;data&#x27;, wrapToDomain(connection, function (data) &#123;</span><br><span class="line">  connection._protocol.write(data);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>服务器返回的数据交给Parser，Parser解析出服务器返回的查询结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Protocol.prototype.write = function(buffer) &#123;</span><br><span class="line">  this._parser.write(buffer);</span><br><span class="line">  return true;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/mysqljs/mysql%E6%98%AF%E4%B8%80%E4%B8%AA%E7%94%A8Node.js%E5%86%99%E7%9A%84mysql%E9%A9%B1%E5%8A%A8%EF%BC%8C%E4</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>二叉树遍历递归和非递归</title>
    <link href="https://blog.suyuan.me/2019/06/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E9%80%92%E5%BD%92%E5%92%8C%E9%9D%9E%E9%80%92%E5%BD%92/"/>
    <id>https://blog.suyuan.me/2019/06/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E9%80%92%E5%BD%92%E5%92%8C%E9%9D%9E%E9%80%92%E5%BD%92/</id>
    <published>2019-06-19T15:19:16.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>假如二叉树的定义为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Tree(val) &#123;</span><br><span class="line">  this.val = val;</span><br><span class="line">  this.left = this.right = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉树遍历的递归实现方式非常简洁易懂，通过函数调用栈保存了遍历到的节点，当函数返回时，我们很容易知道从哪一个节点开始继续遍历。</p><h2 id="pre-order遍历的递归实现"><a href="#pre-order遍历的递归实现" class="headerlink" title="pre-order遍历的递归实现"></a>pre-order遍历的递归实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function traverse(tree) &#123;</span><br><span class="line">  if (!tree) return;</span><br><span class="line">  console.log(tree.val);</span><br><span class="line">  if (tree.left) traverse(tree.left);</span><br><span class="line">  if (tree.right) traverse(tree.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用traverse(tree.left)会先保存当前函数的局部变量，参数，然后在函数调用栈中创建一个frame，新的frame记录了traverse(tree.left)返回时，下一步要执行的代码的地址，在这里应该是 if (tree.right) traverse(tree.right);</p><h2 id="用stack模拟递归调用"><a href="#用stack模拟递归调用" class="headerlink" title="用stack模拟递归调用"></a>用stack模拟递归调用</h2><p>所有递归形式的程序都有等价的非递归的形式。把递归形式的程序转换为非递归的形式的思路是，用一个stack来模拟函数调用栈，每个递归调用相当于一个push操作，函数返回相当于pop操作。我们push到栈上的数据需要至少提供两种信息，执行push操作时的上下文和执行pop以后要执行的代码。</p><p>对于pre-order遍历来说，push到栈上的数据需要至少提供两个信息，一是push到栈的节点的父节点，二是push到栈的节点是左节点还是右节点，当然更完善的模拟应该把所有局部变量、参数都保存在堆栈中。有了这两个信息，我们就可以在pop以后，区别开这个pop模拟的是一次traverse(tree.left)返回了，还是traverse(tree.right)返回了。之所以要知道这一点，一是为了决定是否打印节点，二是为了判断下一个遍历的节点是哪一个。如果是traverse(tree.right)返回了，那么程序就结束了；如果是traverse(tree.left)结束了，那么还要继续遍历右节点。</p><p>pre-order非递归实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">function traverse(tree) &#123;</span><br><span class="line">  if (!tree) return;</span><br><span class="line">  let stack = [&#123;</span><br><span class="line">    tree: tree,</span><br><span class="line">    parent: null, // 父节点，通过父节点可以拿到右节点</span><br><span class="line">    isLeft: true // 是左节点，还是右节点</span><br><span class="line">  &#125;];</span><br><span class="line">  while (stack.length &gt; 0) &#123;</span><br><span class="line">    let node = stack[stack.length-1];</span><br><span class="line">    console.log(node.tree.val); // pre-order遍历先打印父节点</span><br><span class="line"></span><br><span class="line">    if (node.tree.left) &#123;</span><br><span class="line">  // pre-order先遍历左节点，push相当于一次递归调用traverse(tree.left);</span><br><span class="line">      stack.push(&#123;</span><br><span class="line">        tree: node.tree.left,</span><br><span class="line">        parent: node.tree,</span><br><span class="line">        isLeft: true</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; else if (node.tree.right) &#123;</span><br><span class="line">  // 如果最左边的节点没有左节点了，那么遍历右节点，相当于调用traverse(tree.right);</span><br><span class="line">      stack.push(&#123;</span><br><span class="line">        tree: node.tree.right,</span><br><span class="line">        parent: node.tree,</span><br><span class="line">        isLeft: false</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">  // 到达叶子节点，相当于递归版本中if (!tree) return;</span><br><span class="line">// 开始pop，模拟函数返回</span><br><span class="line">// 这里就用到了保存在堆栈上的parent和isLeft信息</span><br><span class="line">// 利用这两个信息可以判断当前的pop是否相当于traverse(tree.left)返回</span><br><span class="line">// 如果是，那么需要遍历右节点，否则继续pop(相当于返回到上层函数)</span><br><span class="line">      while (stack.length &gt; 0)&#123;</span><br><span class="line">        let top = stack.pop();</span><br><span class="line">        if (top.isLeft &amp;&amp; top.parent &amp;&amp; top.parent.right) &#123;</span><br><span class="line">          stack.push(&#123;</span><br><span class="line">            tree: top.parent.right,</span><br><span class="line">            parent: top.parent,</span><br><span class="line">            isLeft: false</span><br><span class="line">          &#125;);</span><br><span class="line">          break;</span><br><span class="line">        &#125; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们使用堆栈模拟了函数递归调用过程，基本的流程是，一开始连续地入栈，模拟函数调用，然后出栈，判断是否要遍历右节点，然后重复这个过程。这段代码还是比较复杂的，不怎么直观，下面的代码更简洁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function traverse(tree) &#123;</span><br><span class="line">  if (!tree) return;</span><br><span class="line">  let stack = [tree];</span><br><span class="line">  while (stack.length &gt; 0) &#123;</span><br><span class="line">    let node = stack.pop();</span><br><span class="line">    console.log(node.val);</span><br><span class="line">    if (node.right) stack.push(node.right);</span><br><span class="line">    if (node.left) stack.push(node.left);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么代码可以精简成这样呢?主要是两点，因为是pro-order遍历，先打印父节点，这样在后面的程序中没必要保留对父节点的引用。二是左子树遍历完，下一个节点就是右节点，我们不必等到遍历左子树完成就可以把右节点先放到堆栈中。同样对于遍历左子树，当打印完左子树根节点，就没必要保留对根节点的引用了。因此上面这段程序从堆栈中pop一个节点，就马上打印。而模拟堆栈版本的程序，堆栈中一直保留着从根节点到叶子节点的引用，直到从叶子节点开始pop，因为这样才完整模拟了函数调用。</p><p>对比上面的两段非递归pre-order遍历代码，我们发现模拟函数调用写出的代码其实会比较复杂，还需要经过优化才更容易理解。</p><h2 id="in-order遍历"><a href="#in-order遍历" class="headerlink" title="in-order遍历"></a>in-order遍历</h2><p>递归实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function traverse(tree) &#123;</span><br><span class="line">  if (!tree) return;</span><br><span class="line">  if (tree.left) traverse(tree.left);</span><br><span class="line">  console.log(tree.val);</span><br><span class="line">  if (tree.right) traverse(tree.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非递归实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function traverse(tree) &#123;</span><br><span class="line">  if (!tree) return;</span><br><span class="line">  let stack = [tree];</span><br><span class="line">  while (stack.length &gt; 0) &#123;</span><br><span class="line">    let top = stack[stack.length-1];</span><br><span class="line">    if (top.left) &#123;</span><br><span class="line">      stack.push(top.left);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      while (stack.length &gt; 0) &#123;</span><br><span class="line">        top = stack.pop();</span><br><span class="line">        console.log(top.val);</span><br><span class="line">        if (top.right) &#123;</span><br><span class="line">          stack.push(top.right);</span><br><span class="line">          break;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="post-order遍历"><a href="#post-order遍历" class="headerlink" title="post-order遍历"></a>post-order遍历</h2><p>递归实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function traverse(tree) &#123;</span><br><span class="line">  if (!tree) return;</span><br><span class="line">  if (tree.left) traverse(tree.left);</span><br><span class="line">  if (tree.right) traverse(tree.right);</span><br><span class="line">  console.log(tree.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非递归实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function traverse(tree) &#123;</span><br><span class="line">  if (!tree) return;</span><br><span class="line">  let stack = [tree];</span><br><span class="line">  let revStack = [];</span><br><span class="line">  while (stack.length &gt; 0) &#123;</span><br><span class="line">    let top = stack.pop();</span><br><span class="line">    revStack.push(top);</span><br><span class="line">    if (top.left) stack.push(top.left);</span><br><span class="line">    if (top.right) stack.push(top.right);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  while (revStack.length &gt; 0) &#123;</span><br><span class="line">    let top = revStack.pop();</span><br><span class="line">    console.log(top.val);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>post-order的非递归遍历比较有意思。我们观察到post-order的遍历顺序是，左-右-中，而如果pre-order遍历的时候先右后左遍历，那么遍历顺序是中-右-左，刚好和post-order的顺序相反，我们把这种遍历顺序叫reverse-pre-order。因此如果想得到post-order的遍历，那么可以按照reverse-pre-order遍历，然后把遍历到的节点依次放到另外一个堆栈中，最后把这个堆栈中的内容输出，就是post-order的遍历。</p><p><img src="https://wx1.sinaimg.cn/mw690/66ae68a1ly1g46rqujxb5j20a905m0st.jpg"></p><p>上图post-order的顺序是2, 3, 1, 5, 7, 6, 4，而reverse-pre-order的顺序刚好是4，6，7，5，1，3，2。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;假如二叉树的定义为&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Go Module in 2019</title>
    <link href="https://blog.suyuan.me/2019/06/18/Go-Module-in-2019/"/>
    <id>https://blog.suyuan.me/2019/06/18/Go-Module-in-2019/</id>
    <published>2019-06-18T15:18:39.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>2018年发布的Go 1.11包含了Go modules</p><p>如果go命令在GOPATH/src以外的目录运行，并且这个目录有一个go.mod文件，那么go是在module模式下运行。</p><p>目前可以通过$GO111MODULE环境变量来控制是否使用go module mode。这个环境变量，默认值是auto。</p><p>计划在2019年8月，发布Go 1.13，这个版本中$GO111MODULE会被默认设置为on。</p><p>目前有大量的工具、源码默认认为go的module放在GOPATH，所以如果迁移到go module mode的话，有大量的工具、源码要修改。</p><p>为了简化迁移的工作，golang团队提供了一个package，golang.org/x/tools/go/packages，这个package抽象了寻找和加载go source code的操作，所以新的代码可以使用这个package。</p><p>go的module是分散在不同的host上的，任何人都建立自己的host。这样的好处是，项目中引用private package很容易，但是这也带来一个问题，就是很难找到所有的module，或者在所有的module中查找一个module。</p><p>go新的module系统提供了一个go module index服务，利用这个服务，用户可以更容易发现新的module，更容易查找一个module。</p><p>go module index服务还会给每一个module提供一个go.sum文件，这个文件会列出一个module依赖的所有其他module的hash，这样go就可以利用go.sum来确保获得的其他module没有被修改过。</p><p>Node.js社区可以在考虑建立一个分布式的module registry，<a href="https://github.com/entropic-dev/entropic">https://github.com/entropic-dev/entropic</a></p><p>参考</p><ul><li><a href="https://blog.golang.org/modules2019">https://blog.golang.org/modules2019</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2018年发布的Go 1.11包含了Go modules&lt;/p&gt;
&lt;p&gt;如果go命令在GOPATH/src以外的目录运行，并且这个目录有一个go.mod文件，那么go是在module模式下运行。&lt;/p&gt;
&lt;p&gt;目前可以通过$GO111MODULE环境变量来控制是否使用go </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Node.js简单Promise实现</title>
    <link href="https://blog.suyuan.me/2019/06/07/Node-js%E7%AE%80%E5%8D%95Promise%E5%AE%9E%E7%8E%B0/"/>
    <id>https://blog.suyuan.me/2019/06/07/Node-js%E7%AE%80%E5%8D%95Promise%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-06-07T15:17:58.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js最常见的callback形式的异步调用API是这个样子的，我们调用fs.readFile，然后在回调函数中分别调用onSuccess和onFail。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">function onSuccess (data) &#123;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function onFail (err) &#123;</span><br><span class="line">  console.log(&#x27;Error: &#x27;, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fs.readFile(&#x27;./myPromise.js&#x27;, (err, data) =&gt; &#123;</span><br><span class="line">  if (err) &#123;</span><br><span class="line">    onFail(err);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    onSuccess(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们也可以这么写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">const p = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">p.resolve = function (data) &#123;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">p.reject = function (err) &#123;</span><br><span class="line">  console.log(&#x27;Error: &#x27;, err);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fs.readFile(&#x27;./myPromise.js&#x27;, (err, data) =&gt; &#123;</span><br><span class="line">  if (err) &#123;</span><br><span class="line">    p.reject(err);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    p.resolve(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>和上面代码的区别是，我们把onSuccess和onFail封装到了一个Object中，分别叫resolve和reject，我们先不讨论这么写的好处。</p><p>然后我们发现其实设置p.resolve和p.reject其实可以在fs.readFile之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">const p = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">fs.readFile(&#x27;./myPromise.js&#x27;, (err, data) =&gt; &#123;</span><br><span class="line">  if (err) &#123;</span><br><span class="line">    p.reject(err);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    p.resolve(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.resolve = function (data) &#123;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">p.reject = function (err) &#123;</span><br><span class="line">  console.log(&#x27;Error: &#x27;, err);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这其实是异步编程的一种特性，而不仅仅是Node.js的特性，用伪代码表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">声明一个对象A</span><br><span class="line">开始一个异步操作</span><br><span class="line">修改对象A的成员</span><br></pre></td></tr></table></figure><p>这里的问题是，异步操作完成以后如何访问修改后的A的成员？在Node.js中，我们可以利用closure来实现。上面的例子中，回调函数内部可以引用到p对象。</p><p>更进一步，我们发现，把p对象封装在一个函数中返回，然后设置函数返回的对象的resolve和reject也是可以行的，原因同上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">function readFile (filePath) &#123;</span><br><span class="line">  const p = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  function cb (err, data) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      p.reject(err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      p.resolve(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.readFile(filePath, cb);</span><br><span class="line"></span><br><span class="line">  return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let p = readFile(&#x27;./myPromise.js&#x27;);</span><br><span class="line"></span><br><span class="line">p.resolve = function (data) &#123;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">p.reject = function (err) &#123;</span><br><span class="line">  console.log(&#x27;Error: &#x27;, err);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们现在添加一个MyPromise类来替换p，方便我们扩展p这个对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">function MyPromise () &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.then = function (resolve, reject) &#123;</span><br><span class="line">  this.resolve = resolve;</span><br><span class="line">  this.reject = reject;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function readFile (filePath) &#123;</span><br><span class="line">  const p = new MyPromise();</span><br><span class="line"></span><br><span class="line">  function cb (err, data) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      p.reject(err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      p.resolve(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.readFile(filePath, cb);</span><br><span class="line"></span><br><span class="line">  return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let p = readFile(&#x27;./myPromise.js&#x27;);</span><br><span class="line"></span><br><span class="line">function resolve (data) &#123;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function reject (err) &#123;</span><br><span class="line">  console.log(&#x27;Error: &#x27;, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p.then(resolve, reject);</span><br></pre></td></tr></table></figure><p>我们知道Promise被用来避免多层的callback嵌套，例如下面的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">function MyPromise () &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.then = function (resolve, reject) &#123;</span><br><span class="line">  this.resolve = resolve;</span><br><span class="line">  this.reject = reject;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function readFile (filePath) &#123;</span><br><span class="line">  const p = new MyPromise();</span><br><span class="line"></span><br><span class="line">  function cb (err, data) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      p.reject(err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      p.resolve(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.readFile(filePath, cb);</span><br><span class="line"></span><br><span class="line">  return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let p = readFile(&#x27;./myPromise.js&#x27;);</span><br><span class="line"></span><br><span class="line">function resolve (data) &#123;</span><br><span class="line">  console.log(data);</span><br><span class="line">  let p2 = readFile(&#x27;./myPromise2.js&#x27;); // 这里嵌套了一层readFile</span><br><span class="line">  function resolve2 (data) &#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">  &#125;</span><br><span class="line">  function reject2 (err) &#123;</span><br><span class="line">    console.log(&#x27;Error: &#x27;, err);</span><br><span class="line">  &#125;</span><br><span class="line">  p2.then(resolve2, reject2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function reject (err) &#123;</span><br><span class="line">  console.log(&#x27;Error: &#x27;, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p.then(resolve, reject);</span><br></pre></td></tr></table></figure><p>p2也是一个MyPromise对象，那么也许可以把p2返回到最外层，然后在最外层调用then。这需要调整MyPromise的内部实现。思路是then方法会返回一个MyPromise对象，我们把这个对象保存在MyPromise的next属性。我们添加了MyPromise.prototype.resolve方法，这个方法调用了this._resolve，而this._resolve会返回一个MyPromise对象，在MyPromise.prototype.resolve方法中，我们调用this._resolve返回的MyPromise对象的then方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">function MyPromise () &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.then = function (resolve, reject) &#123;</span><br><span class="line">  this._resolve = resolve;</span><br><span class="line">  this._reject = reject;</span><br><span class="line">  this.next = new MyPromise();</span><br><span class="line">  return this.next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.resolve = function (data) &#123;</span><br><span class="line">  let p = this._resolve(data);</span><br><span class="line">  if (p) p.then(this.next._resolve, this.next._reject);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.reject = function (err) &#123;</span><br><span class="line">  this._reject(err);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function readFile (filePath) &#123;</span><br><span class="line">  const p = new MyPromise();</span><br><span class="line"></span><br><span class="line">  function cb (err, data) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      p.reject(err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      p.resolve(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.readFile(filePath, &#123;encoding: &#x27;utf-8&#x27;&#125;, cb);</span><br><span class="line"></span><br><span class="line">  return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let p = readFile(&#x27;./a.txt&#x27;);</span><br><span class="line"></span><br><span class="line">function resolve (data) &#123;</span><br><span class="line">  console.log(&#x27;a.txt&#x27;, data);</span><br><span class="line">  let p2 = readFile(&#x27;./b.txt&#x27;);</span><br><span class="line">  return p2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function reject (err) &#123;</span><br><span class="line">  console.log(&#x27;Error: &#x27;, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function resolve2 (data) &#123;</span><br><span class="line">  console.log(&#x27;b.txt&#x27;, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function reject2 (err) &#123;</span><br><span class="line">  console.log(&#x27;Error: &#x27;, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.then(resolve, reject)</span><br><span class="line">.then(resolve2, reject2);</span><br></pre></td></tr></table></figure><p>和上一段代码的最大区别是，不需要在resolve函数中嵌套，p2的resolve和reject函数了。</p><p>上面的代码可以写成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let p = readFile(&#x27;./a.txt&#x27;);</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.then(function resolve (data) &#123;</span><br><span class="line">  console.log(&#x27;a.txt&#x27;, data);</span><br><span class="line">  let p2 = readFile(&#x27;./b.txt&#x27;);</span><br><span class="line">  return p2;</span><br><span class="line">&#125;, function reject (err) &#123;</span><br><span class="line">  console.log(&#x27;Error: &#x27;, err);</span><br><span class="line">&#125;)</span><br><span class="line">.then(function resolve2 (data) &#123;</span><br><span class="line">  console.log(&#x27;b.txt&#x27;, data);</span><br><span class="line">&#125;, function reject2 (err) &#123;</span><br><span class="line">  console.log(&#x27;Error: &#x27;, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果忽略reject函数，那么这段代码已经很像调用Promise对象的代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">readFile(&#x27;./a.txt&#x27;);</span><br><span class="line">.then(function resolve (data) &#123;</span><br><span class="line">  console.log(&#x27;a.txt&#x27;, data);</span><br><span class="line">  let p2 = readFile(&#x27;./b.txt&#x27;);</span><br><span class="line">  return p2;</span><br><span class="line">&#125;)</span><br><span class="line">.then(function resolve2 (data) &#123;</span><br><span class="line">  console.log(&#x27;b.txt&#x27;, data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样的代码给人一种顺序调用readFile的感觉，饶了一大圈，我们仅仅是为了把嵌套的代码变成顺序的形式。</p><p>这里仅仅实现了嵌套的异步操作看起来像顺序操作，和Promise对象功能还差很多，完整的Promise实现的规范是<a href="https://promisesaplus.com/">Promises/A+</a></p><p>Promise其实是一种设计模式，就像面向对象编程带来的一堆设计模式一样，在异步编程领域，Promise被大量使用。</p><p>如果看一下Promise规范的话，单单一个then函数的实现就有十几条规则，编程的时候总是要考虑这些规则可不是个好的体验，如果你不注意的话，它就会跳出说”Surprise!”。但愿你的客户不会被”Surprise”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Node.js最常见的callback形式的异步调用API是这个样子的，我们调用fs.readFile，然后在回调函数中分别调用onSuccess和onFail。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>70岁后工作</title>
    <link href="https://blog.suyuan.me/2019/06/05/70%E5%B2%81%E5%90%8E%E5%B7%A5%E4%BD%9C/"/>
    <id>https://blog.suyuan.me/2019/06/05/70%E5%B2%81%E5%90%8E%E5%B7%A5%E4%BD%9C/</id>
    <published>2019-06-05T15:16:52.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>推荐一部电影 实习生 The Intern，很温暖的电影。</p><p>希望我70岁的时候还在工作，而且我工作不是为了钱。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;推荐一部电影 实习生 The Intern，很温暖的电影。&lt;/p&gt;
&lt;p&gt;希望我70岁的时候还在工作，而且我工作不是为了钱。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis信号量</title>
    <link href="https://blog.suyuan.me/2019/05/30/Redis%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
    <id>https://blog.suyuan.me/2019/05/30/Redis%E4%BF%A1%E5%8F%B7%E9%87%8F/</id>
    <published>2019-05-30T15:16:10.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>信号量可以只使用一个数字来实现，但是这样的信号量没有timeout，如果获得信号量的client出错退出了，那么这个信号量就得不到释放，我们可以利用zset来实现一个支持timeout的信号量。</p><p>思路是每次获取信号量的时候，生成一个id，然后把id添加到zset中，value设置为当前的时戳。然后检查id在zset中的rank，如果超过信号量数量limit，那么获取信号量失败，否则获取信号量成功，返回id。</p><p>client.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">async function acquireSemaphore(name, limit = 5, timeout = 10000) &#123;</span><br><span class="line">  const id = uuidv4(); // 生成一个id</span><br><span class="line">  const now = new Date().getTime(); // 当前的时戳</span><br><span class="line"></span><br><span class="line">  const pipeline = redis.pipeline();</span><br><span class="line">  await pipeline.zremrangebyscore(name, &#x27;-inf&#x27;, now - timeout); // 删除已经超时的信号量</span><br><span class="line">  await pipeline.zadd(name, now, id); </span><br><span class="line">  await pipeline.zrank(name, id);</span><br><span class="line">  const results = await pipeline.exec();</span><br><span class="line">  // 如果新添加的数据的rank没有超过limit，那么获取信号量成功</span><br><span class="line">  if (results[results.length - 1][1] &lt; limit) &#123;</span><br><span class="line">    return id;</span><br><span class="line">  &#125;</span><br><span class="line">  redis.zrem(name, id); // 如果获取信号量失败，那么把id从zset中删除</span><br><span class="line">  return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码依赖于多个client的时间是同步的，假设有两个client A和B，B的时间落后A 10ms。A和B都尝试获取最后一个信号量，A先获取成功。A在zset中添加了最后一项。<br>zset</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1804e2d0-0272-4bf8-97a5-2e30c195b5ff  1559220791205</span><br><span class="line">1804e2d0-0272-4bf8-97a5-2e30c195b5f1  1559220791206</span><br><span class="line">1804e2d0-0272-4bf8-97a5-2e30c195b5f2  1559220791207</span><br><span class="line">1804e2d0-0272-4bf8-97a5-2e30c195b5f3  1559220791208</span><br><span class="line">1804e2d0-0272-4bf8-97a5-2e30c195b5f4  1559220791249</span><br></pre></td></tr></table></figure><p>接着B尝试获取信号量，因为B的时间比A落后，B写入的值是1559220791239，落后A 10ms。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1804e2d0-0272-4bf8-97a5-2e30c195b5f4  1559220791239</span><br></pre></td></tr></table></figure><p>zset会根据value排序，结果是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1804e2d0-0272-4bf8-97a5-2e30c195b5ff  1559220791205</span><br><span class="line">1804e2d0-0272-4bf8-97a5-2e30c195b5f1  1559220791206</span><br><span class="line">1804e2d0-0272-4bf8-97a5-2e30c195b5f2  1559220791207</span><br><span class="line">1804e2d0-0272-4bf8-97a5-2e30c195b5f3  1559220791208</span><br><span class="line">1804e2d0-0272-4bf8-97a5-2e30c195b5f4  1559220791239</span><br><span class="line">1804e2d0-0272-4bf8-97a5-2e30c195b5f4  1559220791249</span><br></pre></td></tr></table></figure><p>这样相当于B插入在了A的前面。这样B在zset中的rank是4，没有超过信号量的限制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await pipeline.zrank(name, id);</span><br></pre></td></tr></table></figure><p>这样A和B同时获得了信号量，超过了信号量的限制，这不是我们想要的结果。</p><p>如果在zset中保存时戳，会有不同机器的时间不同步的问题。如果在zset中存储一个递增的id，这样不同的client在zset中的排序就不会受机器时戳的影响了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">async function acquireSemaphore(name, limit = 5, timeout = 10000) &#123;</span><br><span class="line">  const id = uuidv4();</span><br><span class="line">  const now = new Date().getTime();</span><br><span class="line">  const timeKey = name + &#x27;:time&#x27;;</span><br><span class="line">  const countKey = name + &#x27;:count&#x27;; // 这里增加了一个递增的id</span><br><span class="line"></span><br><span class="line">  let pipeline = redis.pipeline();</span><br><span class="line">  await pipeline.zremrangebyscore(timeKey, &#x27;-inf&#x27;, now - timeout);</span><br><span class="line">  await pipeline.zinterstore(</span><br><span class="line">    countKey, </span><br><span class="line">    2, </span><br><span class="line">    countKey,</span><br><span class="line">    timeKey, </span><br><span class="line">    &#x27;weights&#x27;,</span><br><span class="line">    1,</span><br><span class="line">    0</span><br><span class="line">  ); // 求timeKey和countKey的交集，过滤掉timeout的信号量</span><br><span class="line"></span><br><span class="line">  await pipeline.incr(&#x27;semaphore:count&#x27;);</span><br><span class="line">  let results = await pipeline.exec();</span><br><span class="line">  const count = results[results.length-1][1];</span><br><span class="line"></span><br><span class="line">  pipeline = redis.pipeline();</span><br><span class="line">  await pipeline.zadd(timeKey, now, id);</span><br><span class="line">  await pipeline.zadd(countKey, count, id);</span><br><span class="line">  await pipeline.zrank(countKey, id); // 后获取信号量的client的rank更高</span><br><span class="line"></span><br><span class="line">  let results2 = await pipeline.exec();</span><br><span class="line">  if (results2[results2.length - 1][1] &lt; limit) &#123;</span><br><span class="line">    return id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  redis.zrem(timeKey, id);</span><br><span class="line">  redis.zrem(countKey, id);</span><br><span class="line">  return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;信号量可以只使用一个数字来实现，但是这样的信号量没有timeout，如果获得信号量的client出错退出了，那么这个信号量就得不到释放，我们可以利用zset来实现一个支持timeout的信号量。&lt;/p&gt;
&lt;p&gt;思路是每次获取信号量的时候，生成一个id，然后把id添加到zse</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Node.js实现内网穿透</title>
    <link href="https://blog.suyuan.me/2019/05/25/Node-js%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>https://blog.suyuan.me/2019/05/25/Node-js%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</id>
    <published>2019-05-25T15:15:17.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>如何在办公室外调用办公室内一台服务器上部署的服务？</p><p>如果办公室有固定的IP地址，而且可以映射到内网的机器，那么这个问题很简单。如果无法通过这种方式访问内网的机器，我们还可以通过内网穿透的办法来解决。</p><p>基本的思路是，需要有一台公网的服务器，服务器上运行一个程序，这个程序监听两个端口，分别供外部客户端和内网客户端连接，然后这个程序负责转发双方的通信给对方。</p><p><img src="https://wx3.sinaimg.cn/mw690/66ae68a1ly1g3cj95381qj20oc0gsjsj.jpg"></p><p>server.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const net = require(&#x27;net&#x27;);</span><br><span class="line"></span><br><span class="line">let inSocket, outSocket;</span><br><span class="line">const inServer = net.createServer(function(socket) &#123;</span><br><span class="line">  inSocket = socket;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">inServer.listen(4001);</span><br><span class="line"></span><br><span class="line">const outServer = net.createServer(function(socket) &#123;</span><br><span class="line">  outSocket = socket;</span><br><span class="line">  if (inSocket &amp;&amp; outSocket) &#123;</span><br><span class="line">    inSocket.pipe(outSocket);</span><br><span class="line">    outSocket.pipe(inSocket);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">outServer.listen(4002);</span><br></pre></td></tr></table></figure><p>in_client.js 内网的客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const net = require(&#x27;net&#x27;);</span><br><span class="line"></span><br><span class="line">const socket = net.connect(&#123; port: 4001 &#125;, () =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.on(&#x27;data&#x27;, (data) =&gt; &#123;</span><br><span class="line">  console.log(data.toString());</span><br><span class="line">  socket.write(&#x27;Data from in office&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.on(&#x27;end&#x27;, () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;on end&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>out_client.js 外网的客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const net = require(&#x27;net&#x27;);</span><br><span class="line"></span><br><span class="line">const socket = net.connect(&#123; port: 4002 &#125;, () =&gt; &#123;</span><br><span class="line">  socket.write(&#x27;Data from outside&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.on(&#x27;data&#x27;, (data) =&gt; &#123;</span><br><span class="line">  console.log(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.on(&#x27;end&#x27;, () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;on end&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>先运行server.js，然后运行in_client.js，再运行out_client.js</p><p>然后我们可以看到in_client.js和out_client.js互相可以通过server.js通信</p><p>这里in_client.js需要先运行，然后再运行out_client.js。类似于我们需要先在内网机器上运行teamviewer，然后再在外部运行teamviewer。</p><p>然后我们就可以扩展in_client和out_client的功能，例如当out_client发送特定的命令时，in_client就传输本地的屏幕和键盘事件给对方，这样就能实现类似teamviewer的远程桌面。</p><p>回到我们开始的问题，如果内网机器上部署了一个service，如何通过out_client访问到呢？</p><p>我们可以在in_client启动时就连接要请求的服务，然后等待外部的访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const net = require(&#x27;net&#x27;);</span><br><span class="line"></span><br><span class="line">let serviceSocket, socket;</span><br><span class="line"></span><br><span class="line">socket = net.connect(&#123; port: 4001 &#125;); // 连接公网服务器</span><br><span class="line"></span><br><span class="line">serviceSocket = net.connect(&#123; port: 8080 &#125;); // 假设在http://localhost:8080有一个服务</span><br><span class="line"></span><br><span class="line">socket.pipe(serviceSocket);  // 从服务器转发过来的数据都会发送给service</span><br><span class="line">serviceSocket.pipe(socket); // service返回的数据都会转发给socket，进而转发到服务器</span><br></pre></td></tr></table></figure><p>server.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const net = require(&#x27;net&#x27;);</span><br><span class="line"></span><br><span class="line">let inSocket, outSocket;</span><br><span class="line">const inServer = net.createServer(function(socket) &#123;</span><br><span class="line">  inSocket = socket;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">inServer.listen(4001);</span><br><span class="line"></span><br><span class="line">const outServer = net.createServer(function(socket) &#123;</span><br><span class="line">  outSocket = socket;</span><br><span class="line">  if (inSocket &amp;&amp; outSocket) &#123;</span><br><span class="line">    inSocket.pipe(outSocket);</span><br><span class="line">    outSocket.pipe(inSocket);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">outServer.listen(4002);</span><br></pre></td></tr></table></figure><p>这时我们访问<a href="http://localhost:4002，我们的请求就会被转发到http://localhost:8080">http://localhost:4002，我们的请求就会被转发到http://localhost:8080</a></p><p>仍然有一个问题是，http请求完成以后，客户端过一段时间以后会把底层的TCP连接关掉，那么我们在server上建立的，inSocket和outSocket之间的pipe就断掉了。</p><p>解决这个问题的思路是，在server上再添加一个listen的socket，这个socket专门用来和in_client通信，告诉in_client有新的连接请求，in_client发现有新的连接请求以后，再和server建立一个用于转发tcp的连接，这个连接可以在通信完就关闭掉。</p><p>我们通过这个新建立的socket发送控制命令给in_client，告诉它有新的连接了，所以我们把这个socket叫controlSocket</p><p>server.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const net = require(&#x27;net&#x27;);</span><br><span class="line"></span><br><span class="line">let inSocket, outSocket, controlSocket;</span><br><span class="line"></span><br><span class="line">// 这里我们添加了controlServer</span><br><span class="line">const controlServer = net.createServer();</span><br><span class="line">controlServer.on(&#x27;connection&#x27;, (socket) =&gt; &#123;</span><br><span class="line">  controlSocket = socket;</span><br><span class="line">&#125;);</span><br><span class="line">controlServer.listen(4003);</span><br><span class="line"></span><br><span class="line">const inServer = net.createServer();</span><br><span class="line">inServer.on(&#x27;connection&#x27;, function(socket) &#123;</span><br><span class="line">  inSocket = socket;</span><br><span class="line">  // 这里我们先建立了外部的socket，然后才通过控制socket</span><br><span class="line">  // 告诉in_client建立内部的socket，所以把pipe的代码放在这里</span><br><span class="line">  if (inSocket &amp;&amp; outSocket) &#123;</span><br><span class="line">    inSocket.pipe(outSocket);</span><br><span class="line">    outSocket.pipe(inSocket);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">inServer.listen(4001);</span><br><span class="line"></span><br><span class="line">const outServer = net.createServer();</span><br><span class="line">outServer.on(&#x27;connection&#x27;, function(socket) &#123;</span><br><span class="line">  outSocket = socket;</span><br><span class="line">  controlSocket.write(&#x27;new_conn_cmd&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">outServer.listen(4002);</span><br></pre></td></tr></table></figure><p>in_client.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const net = require(&#x27;net&#x27;);</span><br><span class="line"></span><br><span class="line">let serviceSocket, outSocket, controlSocket;</span><br><span class="line"></span><br><span class="line">controlSocket = net.connect(&#123; port: 4003 &#125;);</span><br><span class="line"></span><br><span class="line">controlSocket.on(&#x27;data&#x27;, (data) =&gt; &#123;</span><br><span class="line">  // 这里没有处理命令的长度</span><br><span class="line">  data = data.toString();</span><br><span class="line">  if (data === &#x27;new_conn_cmd&#x27;) &#123;</span><br><span class="line">    outSocket = net.connect(&#123; port: 4001 &#125;);</span><br><span class="line">    serviceSocket = net.connect(&#123; port: 8080 &#125;);</span><br><span class="line">    outSocket.pipe(serviceSocket);</span><br><span class="line">    serviceSocket.pipe(outSocket);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(&#x27;Invalid commadn&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时我们再请求<a href="http://127.0.0.1:4002/%EF%BC%8C%E7%AD%89%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%EF%BC%8C%E8%BF%9E%E6%8E%A5%E4%BC%9A%E8%A2%AB%E6%96%AD%E6%8E%89%EF%BC%8C%E4%B8%8B%E4%B8%80%E6%AC%A1%E8%AF%B7%E6%B1%82%E7%9A%84%E6%97%B6%E5%80%99%E4%BC%9A%E5%BB%BA%E7%AB%8B%E6%96%B0%E7%9A%84%E8%BF%9E%E6%8E%A5%E3%80%82%E5%9B%A0%E4%B8%BAhttp%E5%8D%8F%E8%AE%AE%E4%BC%9A%E5%A4%8D%E7%94%A8%E5%BA%95%E5%B1%82%E7%9A%84%E8%BF%9E%E6%8E%A5%EF%BC%8C%E7%9F%AD%E6%97%B6%E9%97%B4%E5%86%85%E8%BF%9E%E7%BB%AD%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%8D%E4%BC%9A%E5%BB%BA%E7%AB%8B%E6%96%B0%E7%9A%84%E8%BF%9E%E6%8E%A5">http://127.0.0.1:4002/，等一段时间，连接会被断掉，下一次请求的时候会建立新的连接。因为http协议会复用底层的连接，短时间内连续的请求不会建立新的连接</a> 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如何在办公室外调用办公室内一台服务器上部署的服务？&lt;/p&gt;
&lt;p&gt;如果办公室有固定的IP地址，而且可以映射到内网的机器，那么这个问题很简单。如果无法通过这种方式访问内网的机器，我们还可以通过内网穿透的办法来解决。&lt;/p&gt;
&lt;p&gt;基本的思路是，需要有一台公网的服务器，服务器上</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>统计语言模型和隐马尔科夫模型</title>
    <link href="https://blog.suyuan.me/2019/05/22/%E7%BB%9F%E8%AE%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E5%92%8C%E9%9A%90%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E6%A8%A1%E5%9E%8B/"/>
    <id>https://blog.suyuan.me/2019/05/22/%E7%BB%9F%E8%AE%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E5%92%8C%E9%9A%90%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E6%A8%A1%E5%9E%8B/</id>
    <published>2019-05-22T15:14:43.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>”数学之美”是一本科普书籍，作者吴军是语音识别，自然语言处理方面的专家。这本书讲了一些数学在语音识别，自然语言处理方面的应用。</p><p>第三章和第五章分别讲了统计语言模型和隐含马尔可夫模型，很有意思，这篇文章做一下总结。</p><p>语音识别要解决的问题是，我们拿到了一段语音，如何推测出原始的文本是什么。假设这段语音的内容是”你好“，那么我们希望根据语音能推测出原始文本是”你好“。</p><p>我们把语音看做一个序列，o1, o2, o3, … , on，每个字母代表一个语音片段，原始文本看做另一个序列s1, s2, s3, … , sn。</p><p>假设语音是汉语，那么我们s1, s2, s3 … sn是汉字的序列。一般的思路是，我们尝试找出一定的规则，在给定语音序列的时候，推测出文字序列。或者我们可以换一个思路。因为我们已知文字序列是汉字的序列，那么汉字组成的序列的数量是有限的，在给定语音序列的时候，我们计算出每个汉字序列出现的概率，概率最大的那个组合就是我们想要的汉字序列。</p><p>例如给定语音序列o1, o2, o3, … , on，我们计算出P(”中国“) = 0.9, P(”你好“) = 0.6, 那么中国就更可能是语音对应的文本。</p><p>也就是说我们无法100%根据语音推算出原始文本是什么，我们只能说，给定语音，我们认为原始文本是s1, s2, s3, …, sn的概率最大。也就是P(s1, s2, s3, … | o1, o2, o3, …)最大。那么如何计算P(s1, s2, s3, … | o1, o2, o3, …)呢？</p><p>根据贝叶斯公式，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P(s1, s2, s3, ... | o1, o2, o3, ...) = P(o1, o2, o3, ... | s1, s2, s3, ...) P(s1, s2, s3, ...) / P(o1, o2, o3, ...)</span><br></pre></td></tr></table></figure><p>因为o1, o2, o3是语音序列，这个序列一旦产生就不会再变了，因此P(o1, o2, o3, …)是一个可以忽略的常数，最大化P(s1, s2, s3, … | o1, o2, o3, …)，相当于最大化P(o1, o2, o3, … | s1, s2, s3, …) P(s1, s2, s3, …)。</p><p>我们先来计算P(o1, o2, o3, … | s1, s2, s3, …)，按照条件概率</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P(o1, o2, o3, ... | s1, s2, s3, ...) = P(o1|s1...)P(o2|o1,s1...)P(o3|o2,o1,s1...)...P(on|o(n-1)...o1,s1...)</span><br></pre></td></tr></table></figure><p>这个概率计算还是比较复杂的，有一个简化的办法，我们假设o(t)仅仅和s(t)相关，这个假设叫做独立输出假设。这样一来上面的等式可以简化为:</p><p>P(o1, o2, o3, … | s1, s2, s3, …) = P(o1|s1)P(o2|s2)P(o3|s3)…P(on|sn) =  ∏P(ot|st)</p><p>我们用这个简化的概率来近似原来的概率。</p><p>然后来看P(s1, s2, s3, …)，同样根据条件概率</p><p>P(s1, s2, s3, …) = P(s1)P(s2|s1)P(s3|s1,s2)…P(sn|s1, s2, …)</p><p>同样我们简化这个概率的计算，我们假设s(t)仅仅和s(t-1)相关，也就是说一个状态仅仅和前一个状态有关，这个假设叫做马尔科夫假设。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P(s1, s2, s3, ...) = P(s1)P(s2|s1)P(s3|s2)...P(sn|s(n-1)) = ∏ P(s(t) | s(t-1))</span><br></pre></td></tr></table></figure><p>现在我们来看如何计算∏P(ot|st)和∏ P(s(t) | s(t-1))。这两个值可以用人工标注的数据来估算。</p><p>我们可以选择很多语音片段，然后人工标注对应的文本，也就是说我们准备了很多(s1, s2, …, sn)到(o1, o2, …, on)的对应关系。</p><p>我们注意到 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P(ot|st) = P(ot, st) / p(st)。</span><br></pre></td></tr></table></figure><p>在标注数据中，我们统计ot和st同时出现的次数，N(ot, st)，把这个值除以整个标注数据的大小N，这里的N可以是所有标注数据的序列长度之和。那么根据大数定理，在有足够多的数据的情况下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N(ot, st) / N ≃ P(ot, st) / p(st) 。</span><br></pre></td></tr></table></figure><p>再来看P(s(t) | s(t-1))，同样因为P(s(t) | s(t-1)) = P(st, s(t-1)) / P(s(t-1))，而通过标注的数据，我们统计st和s(t-1)同时出现的次数N(st, s(t-1))，然后除以标注数据的大小N, 那么</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N(st, s(t-1) / N ≃ P(st, s(t-1)) / P(s(t-1)) 。</span><br></pre></td></tr></table></figure><p>也就是说，通过标注的数据，我们就可以计算出∏P(ot|st)和∏ P(s(t) | s(t-1))，而通过∏P(ot|st)和∏ P(s(t) | s(t-1))，我们可以计算出，在给定o1, o2, …, on序列的情况下，每种s1, s2, …, sn的概率，最大概率的那个序列就很可能是语音的原始文本。这样就实现了语音识别的功能。</p><p>P(o1, o2, o3, … | s1, s2, s3, …)被称作声学模型，而P(ot|st)和P(s(t) | s(t-1))就是模型的参数，在给定标注数据的情况下，我们可以计算出模型的参数。而根据模型参数，给定o1, o2, …, o3序列，我们可以计算出每个s1, s2, …, sn序列的概率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;”数学之美”是一本科普书籍，作者吴军是语音识别，自然语言处理方面的专家。这本书讲了一些数学在语音识别，自然语言处理方面的应用。&lt;/p&gt;
&lt;p&gt;第三章和第五章分别讲了统计语言模型和隐含马尔可夫模型，很有意思，这篇文章做一下总结。&lt;/p&gt;
&lt;p&gt;语音识别要解决的问题是，我们拿到</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>读巴黎圣母院</title>
    <link href="https://blog.suyuan.me/2019/05/03/%E8%AF%BB%E5%B7%B4%E9%BB%8E%E5%9C%A3%E6%AF%8D%E9%99%A2/"/>
    <id>https://blog.suyuan.me/2019/05/03/%E8%AF%BB%E5%B7%B4%E9%BB%8E%E5%9C%A3%E6%AF%8D%E9%99%A2/</id>
    <published>2019-05-03T15:14:02.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>刚看完还是对副主教同情不起来，尤其是最后他把姑娘交给隐修女的时候，先是威胁，威胁无效就要把姑娘毁掉，这种爱也太变态了。</p><p>豆瓣上有不少喜欢副主教的。这个人学习勤奋，为人善良，收养卡西莫多，养育弟弟约翰。只是因为他所处的社会，他的职业，导致他的爱变的畸形。</p><p>副主教这个人和他弟弟约翰是两个极端，一个恪守各种规则，一个放浪形骸。</p><p>他这个人一向胸怀坦荡，在世间只遵循有益的自然法则，有什么激情都随意宣泄，心潮的湖泊始终流光，因为每天早晨都广泛开辟排泄感情的新沟渠，他哪里知道人的情涛欲海，如果堵塞泄口，就会汹涌澎湃，汇积暴涨，就会漫溢泛滥，就会冲毁心田，始发为内心的饮泣、无声的痉挛，终至冲垮堤坝，恣意横流。</p><p>哎，克洛德，你就是蜘蛛。克洛德，你也是苍蝇。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;刚看完还是对副主教同情不起来，尤其是最后他把姑娘交给隐修女的时候，先是威胁，威胁无效就要把姑娘毁掉，这种爱也太变态了。&lt;/p&gt;
&lt;p&gt;豆瓣上有不少喜欢副主教的。这个人学习勤奋，为人善良，收养卡西莫多，养育弟弟约翰。只是因为他所处的社会，他的职业，导致他的爱变的畸形。&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>读谈判力</title>
    <link href="https://blog.suyuan.me/2019/03/02/%E8%AF%BB%E8%B0%88%E5%88%A4%E5%8A%9B/"/>
    <id>https://blog.suyuan.me/2019/03/02/%E8%AF%BB%E8%B0%88%E5%88%A4%E5%8A%9B/</id>
    <published>2019-03-02T15:13:34.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>一本教你如何谈判的书，有很多实用的原则，值得多次看看。</p><h5 id="不要在立场上讨价还价"><a href="#不要在立场上讨价还价" class="headerlink" title="不要在立场上讨价还价"></a>不要在立场上讨价还价</h5><p>谈判的时候要着眼于利益而不是立场。作者举了个例子，在一个图书馆，一个人要开窗户，一个要关窗户。这是立场冲突。图书馆管理员来询问以后，了解到开窗户的人是想要呼吸新鲜空气，而关窗户的人是怕穿堂风。于是管理员把隔壁的窗户打开了，这样既能呼吸新鲜空气，又避免了穿堂风。两个人的利益是不冲突的，这时纠结在立场上是不明智的。</p><h5 id="把人和事分开"><a href="#把人和事分开" class="headerlink" title="把人和事分开"></a>把人和事分开</h5><p>每个人都渴望别人的尊重，在谈判中也是如此。即使谈判很艰难，也要表示对别人的尊重，注意维护和对方良好的关系。</p><h5 id="关注对方的想法"><a href="#关注对方的想法" class="headerlink" title="关注对方的想法"></a>关注对方的想法</h5><p>有些你认为不重要的事情，对方可能认为很重要，所以要关注对方的想法。对我们来说可能是举手之劳的事情，对对方可能很重要。</p><h5 id="为共同利益创造方案"><a href="#为共同利益创造方案" class="headerlink" title="为共同利益创造方案"></a>为共同利益创造方案</h5><p>有时候我们发现双方利益是冲突的，这时候要想想能否把蛋糕做大一点，这样双方都能得到足够的利益。</p><p>作为一名谈判者，你应尽量找到让对方满意的解决方案。如果顾客感觉在买卖中受骗，那么店老板实际上也失败了。他会失去一位顾客，名声也会受损。</p><p>在大多数情况下，问一位谈判者“谁赢了”就好比问谁赢得了婚姻一样不合适。</p><h5 id="确定对方的权限"><a href="#确定对方的权限" class="headerlink" title="确定对方的权限"></a>确定对方的权限</h5><p>在做出决定前，询问对方，他有多大的权限做决定。英国的脱欧谈判就挺有意思，欧盟和英国谈判结束了，谈判的结果还要英国议会通过，感觉这个很扯。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一本教你如何谈判的书，有很多实用的原则，值得多次看看。&lt;/p&gt;
&lt;h5 id=&quot;不要在立场上讨价还价&quot;&gt;&lt;a href=&quot;#不要在立场上讨价还价&quot; class=&quot;headerlink&quot; title=&quot;不要在立场上讨价还价&quot;&gt;&lt;/a&gt;不要在立场上讨价还价&lt;/h5&gt;&lt;p&gt;谈判的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>读人生的智慧</title>
    <link href="https://blog.suyuan.me/2019/01/29/%E8%AF%BB%E4%BA%BA%E7%94%9F%E7%9A%84%E6%99%BA%E6%85%A7/"/>
    <id>https://blog.suyuan.me/2019/01/29/%E8%AF%BB%E4%BA%BA%E7%94%9F%E7%9A%84%E6%99%BA%E6%85%A7/</id>
    <published>2019-01-29T15:13:07.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>1月的第二本书”谈判力“跳票了 ，并没有读这本书，只好作为2月的第一本书了。</p><p>这里摘抄一些”人生的智慧“这本书的内容。</p><p>每个人到底生活于何样的世界，首先取决于这个人对这个世界的理解。这个世界因为个人头脑和精神的差异而相应不同。因此，每个人的世界是贫瘠的、浅薄的和肤浅的，抑或丰富多彩的、趣味盎然和充满意义的，这视个人的头脑而定。例如，不少人羡慕他人在生活中发现和遇到饶有趣味的事情，其实前者应该羡慕后者所具有的理解事物的禀赋才对。因为正是归因于他们理解事物的禀赋，他们所经历过的事情，在其描绘中都带有某种韵味。这是因为在一个思想丰富的人看来是意味深长的事情，对于一个肤浅、头脑庸俗的人来说，却不过是平凡世界里面的乏味一幕而已。</p><p>对于人的幸福快乐而言，主体远远比客体来得重要，任何一切都可以证实这一点。例子包括：饥饿才是最好的调味品，衰老之人对青春美色再难一见钟情。</p><p>对生活稍作考察就可以知道：痛苦和无聊是人类幸福的两个死敌。</p><p>因此，我们看见低下的劳动阶层与匮乏，亦即痛苦，进行着永恒的斗争，而有钱的上流社会却旷日持久地与无聊进行一场堪称绝望的搏斗。</p><p>一个人对痛苦的感受能力和对无聊的感受能力成反比，这是由一个人的精神能力的大小所决定的。</p><p>因为人们彼此之间并没有可以交换的思想，所以，他们就交换纸牌，并试图赢取对方的金钱。</p><p>明智的人在取暖的时候懂得与火保持一段距离，而不会像傻瓜那样太过靠近火堆。</p><p>最重要的是我们不应让大脑进行一切强迫性的、持续不停顿的和不合时宜的劳作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1月的第二本书”谈判力“跳票了 ，并没有读这本书，只好作为2月的第一本书了。&lt;/p&gt;
&lt;p&gt;这里摘抄一些”人生的智慧“这本书的内容。&lt;/p&gt;
&lt;p&gt;每个人到底生活于何样的世界，首先取决于这个人对这个世界的理解。这个世界因为个人头脑和精神的差异而相应不同。因此，每个人的世界是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>读Drive</title>
    <link href="https://blog.suyuan.me/2019/01/17/%E8%AF%BBDrive/"/>
    <id>https://blog.suyuan.me/2019/01/17/%E8%AF%BBDrive/</id>
    <published>2019-01-17T15:12:25.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>年初给自己订了个计划，一个月读两本书，第一本选的是Drive，作者是Daniel H.Pink。</p><p>现在是1月17号，我依然没有读完这本书。部分原因是没有花时间读，部分原因是这是本英文书，读起来比较费劲。</p><p>看着半个月即将过去，不仅心里着急，于是读书的时候力求读的快，囫囵吞枣，反而读不进去。</p><p>于是想，读不完就读不完吧，这一本读了多少算多少，我还是继续开始读下一本。</p><p>这篇文章是读“Drive”的笔记。</p><p>管理者经常碰到的一个问题是如何激励员工，最传统的办法是萝卜加大棒。萝卜的例子有升职、加薪、表扬。大棒的例子有开除，降薪，批评。通过正向的激励和反向的激励来刺激员工达成目标。这个方法实施起来简单，而且效果不错，大家在生活中能经常看到。</p><p>这本书提出，有时候萝卜加大棒是不合适的，会带来不好的结果，它的总结是:</p><ol><li>会耗尽耗尽内部驱动力。人们是为了奖励来做事情，而不是真心想做。</li><li>不能提高效率。奖励超过了一定限度，对提高效率没什么帮助。</li><li>会阻止创造性。</li><li>会排挤好的行为。比如付钱给献血的人，反而会导致献血量下降，因为排挤了志愿献血的人。</li><li>会鼓励作弊，走捷径和不道德的行为。</li><li>会对获得奖励上瘾。</li><li>短视，只看到短期激励带来的利益。</li></ol><p>那么什么时候萝卜和大棒比较适合呢，作者给出的答案是，那些“需要重复”的工作。如果一份工作是需要根据一份文档，按照步骤进行，无聊，但是要确保不犯错误，并且重复进行，那么这样的工作比较适合萝卜和大棒。这让我想起了工厂里的安全生产奖，对于工厂日复一日的生产活动，激励大家保证安全是非常重要的。</p><p>作者定义了两种驱动，一是外部驱动，比如金钱，物质奖励。二是内部驱动，比如自主性，精通，使命感。对于重复的工作，外部驱动更适合。而对于那些需要创造力的工作，内部驱动更适合。</p><p>下面分别来讲自主性，精通和使命感。</p><p>如果人们感觉自己可以决定要做的事，那么效率会更高。Google会给员工20%时间来做自己认为对公司重要的事情，很多重要的产品是在这20%的时间内获得灵感的，比如说Google News，Gmail。当然Goolge也没有把100%的时间给员工做自己想做的事情，说明自主性的效果还是有一定局限的。</p><p>精通或者说追求卓越是另一个重要的内部激励。在一个领域追求卓越，精通这个领域，能够激励人不断学习。在学校里，尤其是高中学的很多知识，高考完就忘了，部分原因是，你并不是为了学这门课程而是为了通过考试。如果你的兴趣就是化学，相信你高考以后仍然会记得那些化学公式。</p><p>使命感。又到年底，公司年会上，创始人一定会再次讲一遍公司的愿景，捎带一些鸡汤。为什么要讲这些？因为使命感是更为长远的目标，我们不能只盯着眼前的利益。什么是使命感？为中华崛起而努力，面对内忧外患，挺身而出，舍我其谁，这就是使命感。站在技术的最前沿，做出改变世界的产品，这也是使命感。</p><p>对于需要创造性的工作，我们需要赋予员工自主性，鼓励他们在工作领域追求卓越，并且要有使命感。</p><p>下一本书“谈判力”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;年初给自己订了个计划，一个月读两本书，第一本选的是Drive，作者是Daniel H.Pink。&lt;/p&gt;
&lt;p&gt;现在是1月17号，我依然没有读完这本书。部分原因是没有花时间读，部分原因是这是本英文书，读起来比较费劲。&lt;/p&gt;
&lt;p&gt;看着半个月即将过去，不仅心里着急，于是读书</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>读曾国藩传</title>
    <link href="https://blog.suyuan.me/2016/11/24/%E8%AF%BB%E6%9B%BE%E5%9B%BD%E8%97%A9%E4%BC%A0/"/>
    <id>https://blog.suyuan.me/2016/11/24/%E8%AF%BB%E6%9B%BE%E5%9B%BD%E8%97%A9%E4%BC%A0/</id>
    <published>2016-11-24T15:09:43.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>最近读了萧一山著的“曾国藩传”，有些心得，记录一下。</p><p>曾国藩是晚清重臣，创建湘军灭掉太平天国。湘军全胜时期，南方各省的总督基本上全是湘军将领，甚至有人劝曾国藩推翻清朝，自己称帝。他的文章思想也流传后世，影响了无数人。毛泽东和蒋介石都很推崇曾国藩。</p><p>书中有一段对曾国藩的评价很精彩，“有宗教家之信仰，而无其迷妄；有道德家之笃实，而无其迂腐；有艺术家之文采，而无其浮华；有哲学家之深思，而无其凿空；有科学家之条理，而无其支离；有政治家之手腕，而无其权诈；有军事家之韬略，而无其残忍。”。</p><h5 id="经世致用"><a href="#经世致用" class="headerlink" title="经世致用"></a>经世致用</h5><p>清朝的读书人除了学习八股文、考科举之外，主要在做两件事，一是考据，二是义理。考据就是翻遍古书，尝试把儒家典籍的每个字搞清楚是什么意思。义理则是研究宋明理学，类似于哲学。</p><p>无论是考据还是义理，都对国家兴亡没有直接的作用，大量人才把精力花在这些事情上实在太浪费资源了。曾国藩生活在清朝末期，鸦片战争已经结束，面对内忧外患，他觉得读书人应该致力于经世致用的学问。他也写诗，也写文章，也思考义理，也读考据的书，但是他并不专研任何一种。</p><p>学习知识一定要着眼于应用，否则就落于虚浮。</p><h5 id="严于律己"><a href="#严于律己" class="headerlink" title="严于律己"></a>严于律己</h5><p>我们常常对他人苛责而对自己宽容。最近看了一部电影叫“完美陌生人”，剧中一对夫妻都和他人有暧昧，但是在发现对方的暧昧秘密时，无不义正辞严，而当对方发现自己的秘密时又为自己百般辩解。</p><p>曾国藩对自己有很高的要求，不贪钱，不贪权，读书做事勤快，孝敬父母，而对他人则比较宽容。曾国藩有记日记的习惯，每天在日记中都反省自己的行为，严格要求自己。</p><h5 id="持之以恒"><a href="#持之以恒" class="headerlink" title="持之以恒"></a>持之以恒</h5><p>自己年纪已经不小，回顾自己的学习、工作，不禁感叹，正是因为不能持之以恒，以至于现在毫无建树。</p><p>曾国藩在30几岁的时候开始写日记，此后无论多忙，都坚持写。他在写给弟弟、子侄的家书中也总是强调，无论读书还是写字，一定要持之以恒。</p><h5 id="读书明理"><a href="#读书明理" class="headerlink" title="读书明理"></a>读书明理</h5><p>小时候，老人常常说，小孩子读过书了应该明事理。事实上，学校里和“明事理”关系最近的估计就是“思想教育”课了，而这门课估计是大家最讨厌的课程。这造成了很多学生学习成绩很好，掌握了很多科学知识，但是却不会与人相处，结果在社会上处处碰壁。</p><p>古人读“四书五经”，重在读书明理，通过学习来塑造学生的人生观和价值观，这是现代学校教育缺失的。所以现在社会上出现了国学热，这也算是一种拨乱反正吧。</p><h5 id="与有才之人分担工作"><a href="#与有才之人分担工作" class="headerlink" title="与有才之人分担工作"></a>与有才之人分担工作</h5><p>曾国藩认识到，一人的力量毕竟有限，为了成就大事业，必须要其他有才的人一起努力，所以他努力寻找、推荐人才，即使是和自己有冲突的人也照样推荐担任重要职位。</p><p>晚清湖南还有一位重臣叫左宗棠，他对平定太平天国也很重要，不过他和曾国藩却总是不对付。曾国藩并没有因此而排挤左宗棠，在国家大事上，曾国藩总是鼎力相助。曾国藩去世以后，左宗棠的挽联是“知人之明，谋国之忠，自愧不如元辅；攻金以砺，错玉以石，相期无负平生；”，可见左对曾的评价。</p><h5 id="个人修养"><a href="#个人修养" class="headerlink" title="个人修养"></a>个人修养</h5><p>修身齐家治国平天下。曾国藩非常注重个人修养。</p><p>曾国藩年轻的时候给自己定下了一个每天完成的功课，一共有十二项：“敬；静坐；早起；读书不二；读史；谨言；养气；保身；日知所亡；月无忘其所能；作字；夜不出门；”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近读了萧一山著的“曾国藩传”，有些心得，记录一下。&lt;/p&gt;
&lt;p&gt;曾国藩是晚清重臣，创建湘军灭掉太平天国。湘军全胜时期，南方各省的总督基本上全是湘军将领，甚至有人劝曾国藩推翻清朝，自己称帝。他的文章思想也流传后世，影响了无数人。毛泽东和蒋介石都很推崇曾国藩。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>做自己喜欢的事情</title>
    <link href="https://blog.suyuan.me/2015/12/20/%E5%81%9A%E8%87%AA%E5%B7%B1%E5%96%9C%E6%AC%A2%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    <id>https://blog.suyuan.me/2015/12/20/%E5%81%9A%E8%87%AA%E5%B7%B1%E5%96%9C%E6%AC%A2%E7%9A%84%E4%BA%8B%E6%83%85/</id>
    <published>2015-12-20T15:09:10.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>最近看完了”The Martian“。最大的感受是”要做自己喜欢的事情“，即使不成功，也享受到了生活。</p><p>The Martian的作者是个程序员，业余爱好科幻小说和星际冒险。他出于兴趣在自己网站上一篇一篇发表了The Martian，没想到这部小说火了起来。他亲自计算了小说中飞船飞行轨道，小说中的很多细节来源于他对科学和太空的喜爱，可以说，他对科学和太空的热爱成就了这部小说。</p><p>几个月前，我读了”So good they can’t ignore you“。这本书反对在选择职业的时候跟随激情。</p><p>“跟随激情”和“做自己喜欢的事”其实是一样的。今天我又思考了一下，是否应该做自己喜欢的事情。</p><p>做自己喜欢的事不仅仅与工作有关，还与人生有关。得到自己不想要的东西真的很浪费，因此要做自己喜欢做的事。</p><p>现实点说，为了生存很多人都不能选择自己从事的工作，因此做自己喜欢的事是勇敢的。</p><p>做自己喜欢的事情不代表你会失败，同样也不代表你会成功。为了成功，你需要做到非常好。</p><p>“自己喜欢的事”具有那些你根本意识不到的吸引力，你做这些事的时候不会希望它结束，你沉浸其中，结果不那么重要。</p><p>So good中提到一种观点，那些想着“做自己喜欢的事”的人是自私的，是从世界索取，希望世界符合自己的要求。我认为这样的说法是错误的。喜欢做一件事情是幸运的，这不是一种索求，而是探险中的一种发现，是世界对我们的恩赐。</p><p>So good中的另一个观点是很有价值的，就是“So good they can’t ignore you”。我们要做自己喜欢的事情，而且要做的非常好。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近看完了”The Martian“。最大的感受是”要做自己喜欢的事情“，即使不成功，也享受到了生活。&lt;/p&gt;
&lt;p&gt;The Martian的作者是个程序员，业余爱好科幻小说和星际冒险。他出于兴趣在自己网站上一篇一篇发表了The Martian，没想到这部小说火了起来。他亲</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>读拜占庭通史</title>
    <link href="https://blog.suyuan.me/2015/10/06/%E8%AF%BB%E6%8B%9C%E5%8D%A0%E5%BA%AD%E9%80%9A%E5%8F%B2/"/>
    <id>https://blog.suyuan.me/2015/10/06/%E8%AF%BB%E6%8B%9C%E5%8D%A0%E5%BA%AD%E9%80%9A%E5%8F%B2/</id>
    <published>2015-10-06T15:08:22.000Z</published>
    <updated>2023-08-16T23:41:31.489Z</updated>
    
    <content type="html"><![CDATA[<p>对于非专业研究历史的人来说，读“拜占庭通史”还是比较乏味的。我读历史还停留在“阅读故事”的肤浅阶段，因此读到一些流水账一样的内容时就直接跳过了，但是这些流水账对于一本历史书来说，应该是必要的。比如，拜占庭后期，皇帝走马灯地换，于是有大段大段的文字用来叙述，谁支持谁把皇帝杀死，又怎样被别人杀死。</p><p>下面就当作自己的笔记了，也算自己花时间阅读这本书的成果。</p><p>拜占庭帝国是从古代罗马帝国分裂出来的，又叫东罗马帝国。从公元395年到1453年，存在了近1千年，首都君士坦丁堡，即现在的伊斯坦布尔。</p><p>这个国家全盛时期领土包括，北非，从罗马一直到英国，亚洲的土耳其全境，叙利亚。</p><p>历史上有名的皇帝有：君士坦丁大帝，查士丁尼一世，希拉克略一世。</p><p>君士坦丁大帝是帝国的创始人，打败了竞争对手，统一了罗马，定都君士坦丁堡。</p><p>每当国家发展一段时期，大地主对国家的危害就越明显。这些人占有了大量财富，偷税漏税（就像现在富人做的一样），兼并小农。结果导致国家无法收税，农民纷纷破产。因此每当国家出现危机时，皇帝就开始打击大地主，比较有名的一种做法是实行军区制。皇帝强制把土地分配给农民，这些农民平时种地，战时当兵，有点像我们历史上的屯田制度。</p><p>从建国开始，帝国的皇帝就重视基督教对统治的作用，后来还把基督教作为国教。但是拜占庭帝国的基督教和罗马的教皇一向不对付，双方争执的地方很多，甚至争执仪式上用的饼应该是死面的还是发面的。拜占庭帝国的基督教本身也山头林立，教派纷争不断，对帝国的统治造成了威胁。</p><p>这个国家地处欧亚大陆交界处，历来是东西方交流的要道，因此战争不断。</p><p>波斯是帝国的老对手，双方一直打来打去，有时候是拜占庭，阿拉伯人，波斯人三家打来打去。</p><p>公元7世纪兴起的阿拉伯人曾经对拜占庭帝国造成了很大威胁，但是随着阿拉伯帝国的分裂，拜占庭幸存了下来。</p><p>蒙古人虽然都打到了维也纳，但是拜占庭帝国和蒙古人维持了友好的关系，存活了下来。</p><p>直到奥斯曼土耳其于1453年攻陷君士坦丁堡。</p><p>读完这本书，我不禁问自己，为了了解历史，读这样的历史著作是否值得？因为即使我读完了整本书，我了解到的东西其实和读一读维基百科差不多，书中的细节对我没什么吸引力，读完就忘了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于非专业研究历史的人来说，读“拜占庭通史”还是比较乏味的。我读历史还停留在“阅读故事”的肤浅阶段，因此读到一些流水账一样的内容时就直接跳过了，但是这些流水账对于一本历史书来说，应该是必要的。比如，拜占庭后期，皇帝走马灯地换，于是有大段大段的文字用来叙述，谁支持谁把皇帝杀死</summary>
      
    
    
    
    
  </entry>
  
</feed>
